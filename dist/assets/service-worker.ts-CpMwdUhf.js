import{l as e}from"./utils-CJJeYulS.js";const t="stupify-simplify-text";function a(){try{chrome.contextMenus.remove(t,()=>{chrome.runtime.lastError}),chrome.contextMenus.create({id:t,title:"Simplify with Stupify",contexts:["selection"],documentUrlPatterns:["http://*/*","https://*/*"]}),e.info("Context menu created")}catch(a){e.error("Failed to create context menu:",a)}}async function n(t,a){e.info("Opening side panel for tab:",t);try{chrome.storage.local.set({pendingExplanation:{text:a,timestamp:Date.now()}}).catch(t=>{e.error("Failed to store pending explanation:",t)}),await chrome.sidePanel.open({tabId:t}),e.info("✅ Side panel opened successfully"),i("side_panel_opened",{text_length:a.length})}catch(n){e.error("❌ Failed to open side panel:",n),e.warn("User gesture may have been lost. User should try again.")}}async function o(){const{auth:e}=await chrome.storage.local.get("auth");return e||null}async function r(t){await chrome.storage.local.set({auth:t}),e.info("Auth state updated")}async function s(){await chrome.storage.local.remove("auth"),e.info("Auth state cleared")}async function i(t,a){try{let{analyticsId:n}=await chrome.storage.local.get("analyticsId");n||(n=`ext_${Date.now()}_${Math.random().toString(36).substring(7)}`,await chrome.storage.local.set({analyticsId:n}));const{eventQueue:o=[]}=await chrome.storage.local.get("eventQueue");o.push({event:t,properties:{...a,timestamp:Date.now(),user_id:n,extension_version:chrome.runtime.getManifest().version}}),o.length>100&&o.shift(),await chrome.storage.local.set({eventQueue:o}),e.debug("Event tracked:",t),c().catch(t=>{e.debug("Failed to flush event queue:",t)})}catch(n){e.error("Failed to track event:",n)}}async function c(){try{const{eventQueue:t=[],auth:a}=await chrome.storage.local.get(["eventQueue","auth"]);if(0===t.length)return;(await fetch("https://stupify.app/api/analytics/events",{method:"POST",headers:{"Content-Type":"application/json",...(null==a?void 0:a.accessToken)&&{Authorization:`Bearer ${a.accessToken}`}},body:JSON.stringify({events:t})})).ok&&(await chrome.storage.local.set({eventQueue:[]}),e.debug("Event queue flushed"))}catch(t){e.debug("Failed to flush event queue:",t)}}chrome.runtime.onInstalled.addListener(t=>{e.info("Extension installed:",t.reason),"install"===t.reason?async function(){try{await chrome.storage.local.set({settings:{defaultComplexity:"normal",autoOpenSidePanel:!0,keyboardShortcutEnabled:!0,theme:"light"},stats:{installDate:Date.now(),totalExplanations:0,lastUsed:null},onboarding:{completed:!1,currentStep:0}}),chrome.tabs.create({url:chrome.runtime.getURL("onboarding.html")}),i("extension_installed",{version:chrome.runtime.getManifest().version}),e.info("First install setup complete")}catch(t){e.error("Failed to handle first install:",t)}}():"update"===t.reason&&async function(t){try{const a=chrome.runtime.getManifest().version;e.info("Extension updated:",{from:t,to:a}),i("extension_updated",{from_version:t,to_version:a}),t&&await async function(t,a){e.info("Running migrations:",{fromVersion:t,toVersion:a})}(t,a)}catch(a){e.error("Failed to handle update:",a)}}(t.previousVersion),a()}),chrome.contextMenus.onClicked.addListener(async(a,o)=>{if(a.menuItemId===t)try{if(!(null==o?void 0:o.id))throw new Error("No active tab");const t=a.selectionText;if(!t||t.trim().length<10)return void e.warn("Selection too short or empty");await chrome.storage.local.set({currentSelection:{text:t.trim(),url:o.url||"",domain:new URL(o.url||"").hostname,timestamp:Date.now()}}),await chrome.tabs.sendMessage(o.id,{type:"CONTEXT_MENU_CLICKED",payload:{text:t.trim()}}),await n(o.id,t.trim()),i("context_menu_clicked",{text_length:t.length,domain:new URL(o.url||"").hostname}),e.info("Context menu handled")}catch(r){e.error("Failed to handle context menu click:",r)}}),chrome.commands.onCommand.addListener(async t=>{if("simplify-selection"===t)try{const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});if(!(null==t?void 0:t.id))throw new Error("No active tab");const a=await chrome.tabs.sendMessage(t.id,{type:"GET_CURRENT_SELECTION"}),o=null==a?void 0:a.text;if(!o||o.length<10)return void e.warn("No valid selection for keyboard shortcut");await n(t.id,o),i("keyboard_shortcut_used",{text_length:o.length}),e.info("Keyboard shortcut handled")}catch(a){e.error("Failed to handle keyboard command:",a)}}),chrome.runtime.onMessage.addListener((t,a,c)=>{var l;switch(e.debug("Message received:",t.type),t.type){case"OPEN_SIDE_PANEL":return async function(e,t){if(!t)throw new Error("No tab ID provided");await n(t,e.text)}(t.payload,null==(l=a.tab)?void 0:l.id).then(()=>c({success:!0})).catch(t=>{e.error("Failed to open side panel:",t),c({success:!1,error:t.message})}),!0;case"TRACK_EVENT":return i(t.payload.event,t.payload.properties),c({success:!0}),!1;case"GET_AUTH_STATE":return o().then(e=>c({auth:e})).catch(t=>{e.error("Failed to get auth state:",t),c({auth:null})}),!0;case"SET_AUTH_STATE":return r(t.payload).then(()=>c({success:!0})).catch(t=>{e.error("Failed to set auth state:",t),c({success:!1,error:t.message})}),!0;case"CLEAR_AUTH_STATE":return s().then(()=>c({success:!0})).catch(t=>{e.error("Failed to clear auth state:",t),c({success:!1,error:t.message})}),!0;default:return e.warn("Unknown message type:",t.type),c({success:!1,error:"Unknown message type"}),!1}}),setInterval(()=>{c().catch(()=>{})},3e5);export{s as clearAuthState,a as createContextMenu,o as getAuthState,n as openSidePanel,r as setAuthState,i as trackEvent};
